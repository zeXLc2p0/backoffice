#!/bin/bash
# usage: ./bin/upload-sch-retrospective-data-pulls
#
# Parses and uploads SCH retrospective data from AWS to ID3C.
#
# For testing, alternative S3 bucket and path may be specified using
# FH_SFS_SCH_S3_PATH environment variable.
#
# If the --upload flag is given, the parsed records will be uploaded
# to ID3C and S3.
#
set -euo pipefail
shopt -s extglob

# Change to the top-level of the backoffice checkout
cd "$(dirname "$0")/.."

: "${ID3C:=id3c-production}"
: "${id3c:=pipenv run id3c}"

export PIPENV_PIPFILE="$ID3C/Pipfile"

main() {
    local UPLOAD=0

    for arg; do
        case "$arg" in
            -h|--help)
                print-help
                exit
                ;;
            --upload)
                UPLOAD=1
                shift
                break
                ;;
            *)
        esac
    done

    if [[ $# -gt 0 ]]; then
        echo "Error: extra arguments provided; aborting out of an abundance of caution." >&2
        echo
        print-help
        exit 1
    fi

    local s3path="${FH_SFS_SCH_S3_PATH:-s3://fh-pi-bedford-t/seattleflu/sch/}"
    local datadir="$(mktemp -d -t sch-retrospective-data-pulls-XXXXXX)"

    # Always leave and delete this temporary directory regardless of exit code
    trap "rm -rf '$datadir'" EXIT

    echo "Validating filenames on S3"
    # Check for filenames that don't match expected pattern, excluding files from previous years 
    local -a patterns=(
        'README\.txt$'
        '(SCH|SFS)_Year_?1_.*\.(csv|ndjson)$'
        'SFS_Year2_Main_Data_2019.*\.(csv|xls|xlsx|ndjson)$'
        'SFS_Year[2-9]_Main_Data_202[0-9].*\.(csv|xls|xlsx|ndjson)$'
    )

    local all_patterns="$(join '|' "${patterns[@]}")"
    local all_filenames="$(aws s3 ls --recursive "$s3path")"

    local invalid_filenames_found=0
    while IFS= read -r line
    do
        if ! [[ $line =~ $all_patterns ]]; then
            echo "Invalid filename: $line"
            exit 1
            invalid_filenames_found=1
        fi
    done <<< "$all_filenames"

    if [[ $invalid_filenames_found -eq 0 ]]; then
        echo "All filenames OK"
    fi

    echo "Downloading the most recent Year>=2 SCH data from AWS S3"
    # Do not include SFS Year2 Main Data files prior to 2020. After the last
    # SCH data upload of 2019, the column naming scheme changed. The CLI command
    # was then changed, now causing earlier data pulls to fail on parsing.
    local glob_pattern="SFS_Year[2-9]_Main_Data_202[0-9]*"

    # Since the 2020-02-10 dataset, Amanda has only sent us Excel workbooks,
    # but preserve support for CSV too.
    aws s3 cp --recursive \
        "$s3path" \
        "$datadir" \
        --exclude "*" \
        --include "$glob_pattern.csv" \
        --include "$glob_pattern.xls" \
        --include "$glob_pattern.xlsx" \
        --include "$glob_pattern.ndjson"
    echo

    for retrospective_spreadsheet_file in "$datadir"/*.@(csv|xls|xlsx)
    do
        retrospective_ndjson_file="${retrospective_spreadsheet_file%.@(csv|xls|xlsx)}.ndjson"

        echo "Checking for parsed retrospective data «${retrospective_ndjson_file}»"
        if [[ -e "$retrospective_ndjson_file" ]]; then
            echo "Parsed data found. Continuing"
            echo
            continue
        fi

        echo "No parsed data found. Parsing now"
        echo
        if ! $id3c clinical parse-sch "$retrospective_spreadsheet_file" > "$retrospective_ndjson_file"; then
            echo "Something went wrong when parsing the retrospective data"
            exit 1
        fi
        echo "Finished parsing new SCH retrospective data"

        if [[ $UPLOAD -eq 1 ]]; then
            echo "Uploading the parsed records to ID3C"
            $id3c clinical upload "$retrospective_ndjson_file"
            echo

            echo "Uploading the parsed records to S3"
            aws s3 cp "$retrospective_ndjson_file" "$s3path"
            echo

            echo "Finished uploading new SCH retrospective data"
        fi

    done


}

join() {
    IFS="$1"
    shift
    echo "$*"
}

print-help() {
    # Print the help comments at the top of this file ($0)
    perl -MEnglish -ne '
        s/^# ?// or exit;
        print if $INPUT_LINE_NUMBER >= 2;
    ' "$0"
}

main "$@"
