#!/bin/bash
# usage: import-uw-retrospectives-to-redcap [--debug] [--import] [manifest.ndjson]
#        import-uw-retrospectives-to-redcap --help
#
# Parses the latest manifest files, identifies new UW retrospective samples,
# and imports them into the clinical data pulls REDCap project.
#
# High-level data flow for UW retrospectives looks like:
#
# The manifests are parsed according to the the YAML configuration in $CONFIG,
# which defaults to etc/uw-retrospectives-manifest.yaml.
#
# New samples are identified by diffing against the previous parse, which by
# default is stored at:
#
#    s3://fh-pi-bedford-t/seattleflu/uw-retrospectives-manifest.ndjson
#
# You can optionally test with a different previous parse file (including the
# final replacement step) by providing a local path or another s3:// URL as a
# program argument.
#
# If no new samples are found, the program stops here.
#
# Otherwise, the new samples are reformatted into records appropriate for the
# redcap.iths.org project #19915 and, by default, printed to stdout.
#
# If the --import flag is given, the new records are instead imported into
# REDCap via its web API, and the previous manifest parse is replaced by the
# new parse, for diffing against the next time this program runs.
#
# The --debug option enables even noiser output to stderr than usual, which may
# be helpful for debugging.
#
set -euo pipefail

# Absolute path to our containing repo
base="$(cd "$(dirname "$0")/.."; pwd)"

redcap_api_token_name=REDCAP_API_TOKEN_redcap.iths.org_19915

: "${CONFIG:="$base/etc/uw-retrospectives-manifest.yaml"}"

main() {
    # Parse arguments.
    local import=cat
    local debug=0

    for arg; do
        case "$arg" in
            --import)
                import="import-to-redcap"
                shift;;
            --debug)
                debug=1
                shift;;
            --help)
                print-help
                exit 0;;
        esac
    done

    # Check this early before we do any work rather than failing at the end.
    if [[ $import == import-to-redcap ]]; then
        if [[ -z "$(getenv $redcap_api_token_name)" ]]; then
            echo "The environment variable $redcap_api_token_name is required" >&2
            exit 1
        fi
    fi

    if [[ $debug == 1 ]]; then
        set -x
    fi

    local previous_records="${1:-s3://fh-pi-bedford-t/seattleflu/uw-retrospectives-manifest.ndjson}"

    # Declare separately from initializing to avoid masking failed exit
    # statuses in $(â€¦).
    local latest_records; latest_records="$(mktemp -t "$(basename "$previous_records" .ndjson)"-XXXXXX.ndjson)"

    local new_records="${latest_records%.ndjson}-new.ndjson"

    if [[ $debug == 0 ]]; then
        trap "rm -f '$latest_records' '$new_records'" EXIT
    fi

    parse-manifest > "$latest_records"
    diff-manifests "$previous_records" "$latest_records" > "$new_records"

    if [[ ! -s $new_records ]]; then
        echo "No new records" >&2
        exit
    fi

    if [[ $import == import-to-redcap ]]; then
        import-to-redcap < <(<"$new_records" as-redcap-records)
        cp-records "$latest_records" "$previous_records"
    else
        <"$new_records" as-redcap-records
    fi
}

parse-manifest() {
    id3c manifest parse-using-config "$CONFIG" \
        | jq --compact-output 'select(.sample_origin | test("^(uwmc|hmc|nwh|phskc)_retro$"; "i"))'
}

diff-manifests() {
    id3c manifest diff "$1" "$2"
}

as-redcap-records() {
    jq --compact-output --slurp '
        def blankif(x): if . == x then "" else . end;

        map({
            barcode,
            collection_date: (.collection_date | blankif("na")),
            mrn,
            accession_no: (.accession_no | blankif("na")),
            participant_information_complete: 2
        })
    '
}

import-to-redcap() {
    echo "Importing to REDCap..." >&2
    curl -fsS https://redcap.iths.org/api/ \
        -d token="$(getenv $redcap_api_token_name)" \
        -d format=json \
        -d content=record \
        -d type=flat \
        -d overwriteBehavior=overwrite \
        -d dateFormat=MDY \
        -d returnFormat=json \
        -d returnContent=ids \
        --data-urlencode data@/dev/stdin \
        >&2
    echo >&2
}

cp-records() {
    local new="$1"
    local old="$2"

    case "$old" in
        s3://*)
            aws s3 cp "$new" "$old" >&2;;
        *)
            cp -pv "$new" "$old" >&2;;
    esac
}

getenv() {
    # Gets the value of an environment variable that doesn't have a legal shell
    # variable name (e.g. includes periods), and thus isn't accessible directly
    # via the shell.  Consider avoiding such names in the future, but for now,
    # use this workaround when necessary.
    python3 -c 'import os, sys; print(os.environ.get(sys.argv[1], ""))' "$1"
}

print-help() {
    # Print the help comments at the top of this file ($0)
    local line
    while read -r line; do
        if [[ $line =~ ^#! ]]; then
            continue
        elif [[ $line =~ ^# ]]; then
            line="${line/##/}"
            line="${line/# /}"
            echo "$line"
        else
            break
        fi
    done < "$0"
}

main "$@"
